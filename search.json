[
  {
    "objectID": "cli.html",
    "href": "cli.html",
    "title": "The litdjango CLI",
    "section": "",
    "text": "In order to adapt Django to a literate programming style using Jupyter notebooks, we need to reimplement any builtin django-admin and manage.py cli commands which produce .py modules into commands which produce .ipynb files."
  },
  {
    "objectID": "cli.html#subcommands",
    "href": "cli.html#subcommands",
    "title": "The litdjango CLI",
    "section": "Subcommands",
    "text": "Subcommands\n\nlitdjango startproject\n\nsource\n\n\nStartProject\n\n StartProject (stdout=None, stderr=None, no_color=False,\n               force_color=False)\n\nCopy either a Django application layout template or a Django project layout template into the specified directory.\n:param style: A color style object (see django.core.management.color). :param app_or_project: The string ‘app’ or ‘project’. :param name: The name of the application or project. :param directory: The directory to which the template should be copied. :param options: The additional variables passed to project or app templates\n\nimport os\nfrom pathlib import Path\nimport subprocess\nimport shutil\n\n\ncwd = Path.cwd()\ncwd\n\nPath('/home/aaron/projects/litdjango/litdjango/nbs')\n\n\n\nproject_name = \"ldsp\"\nproject_dir = cwd.parent.parent / \"litdjango_test\" / project_name # TODO refactor this into temp directory\n\n\nif project_dir.exists():\n    shutil.rmtree(project_dir)\nproject_dir.mkdir(exist_ok=True)\nos.chdir(project_dir)\nsubprocess.check_call([\"litdjango\", \"startproject\", project_name, \".\"])\nsubprocess.check_call([\"tree\", \"-I\", \"__pycache__\"])\nos.chdir(cwd)\nshutil.rmtree(project_dir)\n\n.\n├── ldsp\n├── nbs\n│   ├── config\n│   │   ├── asgi.ipynb\n│   │   ├── settings.ipynb\n│   │   ├── urls.ipynb\n│   │   └── wsgi.ipynb\n│   └── manage.ipynb\n└── settings.ini\n\n3 directories, 6 files\n\n\n\nlitdjango export\n\nsource\n\n\n\nExport\n\n Export (stdout=None, stderr=None, no_color=False, force_color=False)\n\nThe base class from which all management commands ultimately derive.\nUse this class if you want access to all of the mechanisms which parse the command-line arguments and work out what code to call in response; if you don’t need to change any of that behavior, consider using one of the subclasses defined in this file.\nIf you are interested in overriding/customizing various aspects of the command-parsing and -execution behavior, the normal flow works as follows:\n\ndjango-admin or manage.py loads the command class and calls its run_from_argv() method.\nThe run_from_argv() method calls create_parser() to get an ArgumentParser for the arguments, parses them, performs any environment changes requested by options like pythonpath, and then calls the execute() method, passing the parsed arguments.\nThe execute() method attempts to carry out the command by calling the handle() method with the parsed arguments; any output produced by handle() will be printed to standard output and, if the command is intended to produce a block of SQL statements, will be wrapped in BEGIN and COMMIT.\nIf handle() or execute() raised any exception (e.g. CommandError), run_from_argv() will instead print an error message to stderr.\n\nThus, the handle() method is typically the starting point for subclasses; many built-in commands and command types either place all of their logic in handle(), or perform some additional parsing work in handle() and then delegate from it to more specialized methods as needed.\nSeveral attributes affect behavior at various steps along the way:\nhelp A short description of the command, which will be printed in help messages.\noutput_transaction A boolean indicating whether the command outputs SQL statements; if True, the output will automatically be wrapped with BEGIN; and COMMIT;. Default value is False.\nrequires_migrations_checks A boolean; if True, the command prints a warning if the set of migrations on disk don’t match the migrations in the database.\nrequires_system_checks A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System checks registered in the chosen tags will be checked for errors prior to executing the command. The value ‘all’ can be used to specify that all system checks should be performed. Default value is ‘all’.\nTo validate an individual application's models\nrather than all applications' models, call\n``self.check(app_configs)`` from ``handle()``, where ``app_configs``\nis the list of application's configuration provided by the\napp registry.\nstealth_options A tuple of any options the command uses which aren’t defined by the argument parser.\n\nif project_dir.exists():\n    shutil.rmtree(project_dir)\nproject_dir = cwd.parent.parent / \"litdjango_test/ldsp\"\nproject_dir.mkdir(exist_ok=True)\nos.chdir(project_dir)\nsubprocess.check_call([\"litdjango\", \"startproject\", \"ldsp\", \".\"])\nsubprocess.check_call([\"litdjango\", \"export\"])\nsubprocess.check_call([\"tree\", \"-I\", \"__pycache__\", str(project_dir)])\nsubprocess.check_call([\"python\", f\"{project_name}/manage.py\", \"check\"])\nos.chdir(cwd)\nshutil.rmtree(project_dir)\n\nExporting...\n/home/aaron/projects/litdjango/litdjango_test/ldsp\n├── ldsp\n│   ├── config\n│   │   ├── asgi.py\n│   │   ├── settings.py\n│   │   ├── urls.py\n│   │   └── wsgi.py\n│   └── manage.py\n├── nbs\n│   ├── config\n│   │   ├── asgi.ipynb\n│   │   ├── settings.ipynb\n│   │   ├── urls.ipynb\n│   │   └── wsgi.ipynb\n│   └── manage.ipynb\n└── settings.ini\n\n4 directories, 11 files\nSystem check identified no issues (0 silenced).\n\n\n\nlitdjango startapp\n\nsource\n\n\n\nStartApp\n\n StartApp (stdout=None, stderr=None, no_color=False, force_color=False)\n\nCopy either a Django application layout template or a Django project layout template into the specified directory.\n:param style: A color style object (see django.core.management.color). :param app_or_project: The string ‘app’ or ‘project’. :param name: The name of the application or project. :param directory: The directory to which the template should be copied. :param options: The additional variables passed to project or app templates"
  },
  {
    "objectID": "cli.html#register-subcommands-with-the-cli",
    "href": "cli.html#register-subcommands-with-the-cli",
    "title": "The litdjango CLI",
    "section": "Register subcommands with the cli",
    "text": "Register subcommands with the cli\n\nsource\n\nLitManagementUtility\n\n LitManagementUtility (argv=None)\n\nThe litdjango cli is an instance of this class\nWe use the lit_commands dict as a container for new litdjango commands, or overridden django commands, and fallback to the default django command for anything else.\n\nsource\n\n\ncli\n\n cli ()\n\nThis is set as entrypoint of the litdjango command in the package’s setup.py\n\n!litdjango startproject --help\n\nusage: litdjango startproject [-h] [--template TEMPLATE]\n                              [--extension EXTENSIONS] [--name FILES]\n                              [--exclude [EXCLUDE]] [--version] [-v {0,1,2,3}]\n                              [--settings SETTINGS] [--pythonpath PYTHONPATH]\n                              [--traceback] [--no-color] [--force-color]\n                              name [directory]\n\nCreates a Django project directory structure for the given project name in the\ncurrent directory or optionally in the given directory.\n\npositional arguments:\n  name                  Name of the application or project.\n  directory             Optional destination directory\n\noptions:\n  -h, --help            show this help message and exit\n  --template TEMPLATE   The path or URL to load the template from.\n  --extension EXTENSIONS, -e EXTENSIONS\n                        The file extension(s) to render (default: \"py\").\n                        Separate multiple extensions with commas, or use -e\n                        multiple times.\n  --name FILES, -n FILES\n                        The file name(s) to render. Separate multiple file\n                        names with commas, or use -n multiple times.\n  --exclude [EXCLUDE], -x [EXCLUDE]\n                        The directory name(s) to exclude, in addition to .git\n                        and __pycache__. Can be used multiple times.\n  --version             Show program's version number and exit.\n  -v {0,1,2,3}, --verbosity {0,1,2,3}\n                        Verbosity level; 0=minimal output, 1=normal output,\n                        2=verbose output, 3=very verbose output\n  --settings SETTINGS   The Python path to a settings module, e.g.\n                        \"myproject.settings.main\". If this isn't provided, the\n                        DJANGO_SETTINGS_MODULE environment variable will be\n                        used.\n  --pythonpath PYTHONPATH\n                        A directory to add to the Python path, e.g.\n                        \"/home/djangoprojects/myproject\".\n  --traceback           Raise on CommandError exceptions.\n  --no-color            Don't colorize the command output.\n  --force-color         Force colorization of the command output."
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "Utils",
    "section": "",
    "text": "source\n\nprint_notebook_contents\n\n print_notebook_contents (contents)\n\nUseful for printing notebook contents to stdout\n\nsource\n\n\nget_project_root\n\n get_project_root (path:pathlib.Path=None)\n\nThe project root is the directory containing a settings.ini\n\nsource\n\n\nget_project_config\n\n get_project_config (path:pathlib.Path=None, cfg_name:str='settings.ini')\n\nThis is a fork of nbdev.config.get_config function with the _apply_defaults call."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "This is a work in progress…"
  },
  {
    "objectID": "index.html#start-a-project",
    "href": "index.html#start-a-project",
    "title": "Getting Started",
    "section": "Start a project",
    "text": "Start a project\nlitdjango startproject &lt;projectname&gt;\nThe default project template mostly resembles the default django project template.\nA regular Django project created with django-admin startproject &lt;project-name&gt; will have the following directory structure:\n&lt;project-name&gt;\n├── manage.py\n└── &lt;project-name&gt;\n    ├── __init__.py\n    ├── asgi.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n\nBy default manage.py, asgi.py, wsgi.py and settings.py files all hardcode the path of the settings module which is dependent on the &lt;project-name&gt;.\nThis is unfortunate because if you decide to change the name of your project (which might not be set in stone at the beginning of a project), and you want the name change to reflected in the code then you have to update each of these references.\nFor this reason we have removed this reference to the project name by renaming the inner  directory to config, and updated the path to the settings file in each file accordingly:\ntestproject/\n├── nbs\n│   ├── config\n│   │   ├── asgi.ipynb\n│   │   ├── settings.ipynb\n│   │   ├── urls.ipynb\n│   │   └── wsgi.ipynb\n│   └── manage.ipynb\n└── &lt;project-name&gt;\n    # build your django project by editing nbs\n    # a build command will output regular python modules in this directory"
  }
]