# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/utils.ipynb.

# %% auto 0
__all__ = ['LITDJANGO_ROOT', 'print_notebook_contents', 'get_project_root', 'get_project_config']

# %% ../nbs/utils.ipynb 2
import json
from pathlib import Path

from nbdev.config import Config, get_config as get_nbdev_config

# %% ../nbs/utils.ipynb 3
cfg = get_nbdev_config()

def get_litdjango_root():
    try:
        LITDJANGO_ROOT = Path(__file__).parent.parent
    except NameError as e:
        if "get_ipython" in globals():
            LITDJANGO_ROOT = cfg.config_path
        else:
            raise e
    return LITDJANGO_ROOT

# %% ../nbs/utils.ipynb 4
LITDJANGO_ROOT = get_litdjango_root()

# %% ../nbs/utils.ipynb 5
def print_notebook_contents(contents):
    """Useful for printing notebook contents to stdout"""
    data = json.loads(contents)
    
    for n, cell in enumerate(data['cells']):
        print(
            f"\n"
             "# -----------------------------\n"
            f"# cell no:{n}\n"
            f"# cell type:{cell['cell_type']}\n"
             "# -----------------------------"
        )
        for line in cell['source']:
            print(line, end='')

# %% ../nbs/utils.ipynb 6
def get_project_root(path: Path=None) -> Path:
    """The project root is the directory containing a settings.ini"""
    if path is None:
        try: 
            path = Path(__file__).parent # TODO - this doesn't work as intended
        except NameError as e:
            if "get_ipython" in globals(): 
                path = Path.cwd()  # workaround for execution in jupyter environment
            else:
                raise e
    while path != path.parent:  
        if (path / "settings.ini").exists(): return path
        else: path = path.parent  
    raise FileNotFoundError("Could not find settings.ini in any parent directories.")

# %% ../nbs/utils.ipynb 7
def get_project_config(path: Path=None, cfg_name:str="settings.ini"):
    """This is a fork of nbdev.config.get_config function with the _apply_defaults call."""
    project_root = get_project_root(path)
    return Config(project_root, cfg_name)
